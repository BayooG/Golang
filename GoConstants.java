/* Generated By:JavaCC: Do not edit this line. GoConstants.java */
package golang;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int HEX_LITERAL = 9;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 10;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 11;
  /** RegularExpression Id. */
  int EXPONENT = 12;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 13;
  /** RegularExpression Id. */
  int STRING_LITERAL = 14;
  /** RegularExpression Id. */
  int PLUS = 15;
  /** RegularExpression Id. */
  int MINUS = 16;
  /** RegularExpression Id. */
  int MULTIPLY = 17;
  /** RegularExpression Id. */
  int DIVIDE = 18;
  /** RegularExpression Id. */
  int CONSTANT = 19;
  /** RegularExpression Id. */
  int SEMICOLON = 20;
  /** RegularExpression Id. */
  int COLON = 21;
  /** RegularExpression Id. */
  int RB = 22;
  /** RegularExpression Id. */
  int LB = 23;
  /** RegularExpression Id. */
  int RP = 24;
  /** RegularExpression Id. */
  int LP = 25;
  /** RegularExpression Id. */
  int EQL = 26;
  /** RegularExpression Id. */
  int COMMA = 27;
  /** RegularExpression Id. */
  int FLOAT = 28;
  /** RegularExpression Id. */
  int VOID = 29;
  /** RegularExpression Id. */
  int INT = 30;
  /** RegularExpression Id. */
  int CHAR = 31;
  /** RegularExpression Id. */
  int VAR = 32;
  /** RegularExpression Id. */
  int BOOL = 33;
  /** RegularExpression Id. */
  int STRING = 34;
  /** RegularExpression Id. */
  int TRUE = 35;
  /** RegularExpression Id. */
  int FALSE = 36;
  /** RegularExpression Id. */
  int CONTINUE = 37;
  /** RegularExpression Id. */
  int SWITCH = 38;
  /** RegularExpression Id. */
  int RETURN = 39;
  /** RegularExpression Id. */
  int STRUCT = 40;
  /** RegularExpression Id. */
  int STATIC = 41;
  /** RegularExpression Id. */
  int FUNC = 42;
  /** RegularExpression Id. */
  int BREAK = 43;
  /** RegularExpression Id. */
  int CONST = 44;
  /** RegularExpression Id. */
  int DFLT = 45;
  /** RegularExpression Id. */
  int ELSE = 46;
  /** RegularExpression Id. */
  int CASE = 47;
  /** RegularExpression Id. */
  int GOTO = 48;
  /** RegularExpression Id. */
  int FOR = 49;
  /** RegularExpression Id. */
  int TYPE = 50;
  /** RegularExpression Id. */
  int IF = 51;
  /** RegularExpression Id. */
  int DO = 52;
  /** RegularExpression Id. */
  int IDENTIFIER = 53;
  /** RegularExpression Id. */
  int LETTER = 54;
  /** RegularExpression Id. */
  int DIGIT = 55;
  /** RegularExpression Id. */
  int AND = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<CONSTANT>",
    "\";\"",
    "\":\"",
    "\"}\"",
    "\"{\"",
    "\")\"",
    "\"(\"",
    "\"=\"",
    "\",\"",
    "\"float\"",
    "\"void\"",
    "\"int\"",
    "\"char\"",
    "\"var\"",
    "\"bool\"",
    "\"string\"",
    "\"true\"",
    "\"false\"",
    "\"continue\"",
    "\"switch\"",
    "\"return\"",
    "\"struct\"",
    "\"static\"",
    "\"func\"",
    "\"break\"",
    "\"const\"",
    "\"default\"",
    "\"else\"",
    "\"case\"",
    "\"goto\"",
    "\"for\"",
    "\"type\"",
    "\"if\"",
    "\"do\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"&&\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"++\"",
    "\"--\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
  };

}
